plugins {
    id 'java'
    id 'application'
    id 'org.javamodularity.moduleplugin' version '1.8.12'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.25.0'
}

group 'io.github.gleidsonmt'
version '1.0'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.9.2'
}

sourceCompatibility = '17'
targetCompatibility = '17'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

application {
    mainModule = 'io.github.gleidsonmt.release_creator_test'
    mainClass = 'io.github.gleidsonmt.release_creator_test.HelloApplication'
}

javafx {
    version = '17.0.6'
    modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}

test {
    useJUnitPlatform()
}

jlink {
    addExtraDependencies("javafx")

    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']

    launcher {
        name = 'app'
    }

//    jpackageHome = System.getenv('BADASS_JLINK_JPACKAGE_HOME')
//    skipInstaller = false
//    identifier = 'app'

    jpackage {

        installerOptions = [
                '--description', "Gleidson GithubActinos App",
                '--copyright', 'Copyrigth 2022-2023 Gleidson Company'
        ]

        if (System.properties['os.name'].toLowerCase().contains('windows')) {
            println "it's Windows"
//            imageOptions = [
//                    '--icon', 'logo_256.ico'
//            ]
            installerType = 'exe'
            installerOptions = [
                    '--description', "A decorator stage for javafx apps.",
                    '--copyright', 'Copyrigth Â© 2021-2022 GLEIDSON NEVES DA SILVEIRA'
//                    , '--icon', 'logo_256.ico'

            ]
        } else if(System.properties['os.name'].toLowerCase().contains('linux')) {
            println "it's linux"
            installerOptions += [
                    '--linux-menu-group', 'Office',
                    '--linux-shortcut'
            ]
        } else if(System.properties['os.name'].toLowerCase().contains('mac')) {
            println "it's mac"
            installerOptions = ["--verbose", '--mac-sign', "--mac-package-identifier", "Gleidson"]
//            identifier = appName
        }

    }

}

jlinkZip {
    group = 'distribution'
}

task packageDistribution(type: Zip) {
    archiveFileName = "app.zip"
    destinationDirectory = file("/buid/distributions")

    from "/build/jpackage/*"
}